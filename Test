import React, { useState, useEffect } from 'react';
import { Container, Card, Button, Form, Row, Col, Alert, Tabs, Tab } from 'react-bootstrap';
import 'bootstrap/dist/css/bootstrap.min.css';
import Plot from 'react-plotly.js';
import './App.css';

// Sample dataset for SMEs
const sampleSMEsData = [
  {
    id: 1,
    name: "TechCorp",
    industry: "Technology",
    revenue: [50000, 52000, 48000, 55000, 58000, 60000, 61000, 62000, 63000, 65000, 67000, 70000],
    expenses: [30000, 31000, 29000, 32000, 33000, 34000, 35000, 35500, 36000, 36500, 37000, 38000],
    compliancePolicies: ["Data privacy", "Cybersecurity"],
    inefficiencyScore: 45,
  },
  {
    id: 2,
    name: "HealthPlus",
    industry: "Healthcare",
    revenue: [40000, 42000, 45000, 46000, 47000, 49000, 50000, 51000, 52000, 53000, 54000, 55000],
    expenses: [25000, 26000, 27000, 28000, 29000, 29500, 30000, 31000, 32000, 33000, 34000, 35000],
    compliancePolicies: ["Patient rights", "Health data security"],
    inefficiencyScore: 60,
  },
  {
    id: 3,
    name: "ManufactureMax",
    industry: "Manufacturing",
    revenue: [60000, 61000, 62000, 63000, 64000, 65000, 66000, 67000, 68000, 69000, 70000, 71000],
    expenses: [40000, 41000, 42000, 43000, 44000, 45000, 46000, 47000, 48000, 49000, 50000, 51000],
    compliancePolicies: ["General Data Protection", "Financial Reporting"],
    inefficiencyScore: 50,
  },
];

function App() {
  const [selectedSME, setSelectedSME] = useState(sampleSMEsData[0]);
  const [modelId, setModelId] = useState(null);
  const [revenue, setRevenue] = useState(35000);
  const [expenses, setExpenses] = useState(15000);
  const [month, setMonth] = useState(5);
  const [prediction, setPrediction] = useState(null);
  const [policies, setPolicies] = useState("Data privacy, Cybersecurity");
  const [complianceStatus, setComplianceStatus] = useState(null);
  const [workflowSuggestion, setWorkflowSuggestion] = useState(null);
  const [error, setError] = useState(null);

  useEffect(() => {
    // Fetching dummy financial data (mock data for now)
    setFinancialData(selectedSME);
  }, [selectedSME]);

  const setFinancialData = (sme) => {
    setRevenue(sme.revenue[month - 1]);
    setExpenses(sme.expenses[month - 1]);
  };

  const handleTrainModel = () => {
    // Mock train model function
    const data = selectedSME;
    setModelId(`${selectedSME.id}-model`);
  };

  const handlePrediction = () => {
    // Mock predict profit function
    if (!modelId) {
      setError('Please train the model first');
      return;
    }
    const predictedProfit = revenue - expenses + month * 100;
    setPrediction(predictedProfit);
  };

  const handleCheckCompliance = () => {
    // Mock compliance check function
    const companyPolicies = policies.split(',').map((policy) => policy.trim());
    const missingCompliance = selectedSME.compliancePolicies.filter((policy) => !companyPolicies.includes(policy));
    setComplianceStatus(missingCompliance.length > 0 ? `Missing Compliance: ${missingCompliance.join(', ')}` : 'Fully Compliant');
  };

  const handleWorkflowOptimization = () => {
    // Mock workflow optimization suggestion
    setWorkflowSuggestion(selectedSME.inefficiencyScore > 50 ? 'Optimize process A and invest in operational assets B' : 'Workflow is optimal');
  };

  return (
    <Container fluid className="app-container">
      <h1 className="mt-4 text-center">AI-Driven SME Platform</h1>
      <p className="text-center">Strategic Development, Operational Management, and Compliance Tracking for SMEs</p>
      {error && <Alert variant="danger">{error}</Alert>}

      <Form.Group as={Row} className="my-4">
        <Form.Label column sm={2} className="text-center">
          Select SME:
        </Form.Label>
        <Col sm={10}>
          <Form.Control
            as="select"
            value={selectedSME.id}
            onChange={(e) => setSelectedSME(sampleSMEsData.find((sme) => sme.id === parseInt(e.target.value)))}
          >
            {sampleSMEsData.map((sme) => (
              <option key={sme.id} value={sme.id}>
                {sme.name} - {sme.industry}
              </option>
            ))}
          </Form.Control>
        </Col>
      </Form.Group>

      <Tabs defaultActiveKey="financialData" id="main-tabs" className="my-4">
        <Tab eventKey="financialData" title="Financial Data">
          <Card className="my-4">
            <Card.Body>
              <Card.Title>Financial Data Overview</Card.Title>
              <Plot
                data={[
                  {
                    x: Array.from({ length: 12 }, (_, i) => `Month ${i + 1}`),
                    y: selectedSME.revenue,
                    type: 'scatter',
                    mode: 'lines+markers',
                    name: 'Revenue',
                  },
                  {
                    x: Array.from({ length: 12 }, (_, i) => `Month ${i + 1}`),
                    y: selectedSME.expenses,
                    type: 'scatter',
                    mode: 'lines+markers',
                    name: 'Expenses',
                  },
                ]}
                layout={{
                  title: 'Revenue vs Expenses',
                  xaxis: { title: 'Month' },
                  yaxis: { title: 'Amount' },
                  paper_bgcolor: '#f8f9fa',
                  plot_bgcolor: '#f8f9fa',
                }}
              />
              <Button variant="primary" onClick={handleTrainModel} className="mt-3">
                Train Model
              </Button>
            </Card.Body>
          </Card>
        </Tab>

        <Tab eventKey="scenarioPlanning" title="Scenario Planning">
          <Card className="my-4">
            <Card.Body>
              <Card.Title>Scenario Planning</Card.Title>
              <Form>
                <Row>
                  <Col>
                    <Form.Group>
                      <Form.Label>Revenue</Form.Label>
                      <Form.Control type="number" value={revenue} onChange={(e) => setRevenue(e.target.value)} />
                    </Form.Group>
                  </Col>
                  <Col>
                    <Form.Group>
                      <Form.Label>Expenses</Form.Label>
                      <Form.Control type="number" value={expenses} onChange={(e) => setExpenses(e.target.value)} />
                    </Form.Group>
                  </Col>
                  <Col>
                    <Form.Group>
                      <Form.Label>Month</Form.Label>
                      <Form.Control type="number" value={month} onChange={(e) => setMonth(e.target.value)} />
                    </Form.Group>
                  </Col>
                </Row>
              </Form>
              <Button variant="primary" onClick={handlePrediction} className="mt-3">
                Predict Profit
              </Button>
              {prediction && <Alert variant="success" className="mt-3">Predicted Profit: {prediction}</Alert>}
            </Card.Body>
          </Card>
        </Tab>

        <Tab eventKey="compliance" title="Compliance Check">
          <Card className="my-4">
            <Card.Body>
              <Card.Title>Compliance Check</Card.Title>
              <Form.Group>
                <Form.Label>Enter Company Policies (comma-separated)</Form.Label>
                <Form.Control type="text" value={policies} onChange={(e) => setPolicies(e.target.value)} />
              </Form.Group>
              <Button variant="primary" onClick={handleCheckCompliance} className="mt-3">
                Check Compliance
              </Button>
              {complianceStatus && <Alert variant="info" className="mt-3">Compliance Status: {complianceStatus}</Alert>}
            </Card.Body>
          </Card>
        </Tab>

        <Tab eventKey="workflowOptimization" title="Workflow Optimization">
          <Card className="my-4">
            <Card.Body>
              <Card.Title>Workflow Optimization Suggestions</Card.Title>
              <Button variant="primary" onClick={handleWorkflowOptimization} className="mt-3">
                Get Workflow Suggestions
              </Button>
              {workflowSuggestion && <Alert variant="warning" className="mt-3">{workflowSuggestion}</Alert>}
            </Card.Body>
          </Card>
        </Tab>
      </Tabs>
    </Container>
  );
}

export default App;
